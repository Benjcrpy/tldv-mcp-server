stages:
  - build
  - release
  - deploy

variables:
  DOCKER_REGISTRY: $CI_REGISTRY
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE

release-version:
  stage: release
  image: node:22
  script:
    - git config --global user.email "${GIT_CI_EMAIL}"
    - git config --global user.name "${GIT_CI_USER}"
    - npm i standard-version --location=global
    - npm run release -- --no-verify
    - git remote set-url --push origin https://$GIT_CI_USER:$GIT_CI_PASSWORD@gitlab.com/$CI_PROJECT_PATH.git
    - git push --follow-tags origin HEAD:$CI_COMMIT_REF_NAME
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TITLE !~ /^chore\(release\).*\ \[release\]$/

build:
  stage: build
  image: node:22
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/

publish-npm:
  stage: deploy
  image: node:22
  script:
    - npm config set @tldx:registry=https://gitlab.com/api/v4/packages/npm/
    - npm config set -- '//gitlab.com/api/v4/packages/npm/:_authToken'="${CI_JOB_TOKEN}"
    - npm config set -- '//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken'="${CI_JOB_TOKEN}"
    - npm ci
    - npm run build
    - npm publish
    - echo "-- npm publish completed successfully"
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v?[0-9]+\.[0-9]+\.[0-9]+$/

publish-docker:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_TAG .
    - docker tag $DOCKER_IMAGE:$CI_COMMIT_TAG $DOCKER_IMAGE:latest
    - docker push $DOCKER_IMAGE:$CI_COMMIT_TAG
    - docker push $DOCKER_IMAGE:latest
    - echo "-- docker publish completed successfully"
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v?[0-9]+\.[0-9]+\.[0-9]+$/

